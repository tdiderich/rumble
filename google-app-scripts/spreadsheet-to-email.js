function createDraftEmails() {
  // Open the active spreadsheet and get the active sheet
  // Tip: To use a specific sheet instead of the active one, use getSheetByName('YourSheetName')
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = sheet.getDataRange().getValues();

  // Ensure there is data to process
  if (data.length < 2) {
    // This ensures there's at least a header row and one data row
    Logger.log("No data available.");
    return;
  }

  // Get the header row
  var headers = data[0];

  // Find relevant columns (customize these as needed)
  // Tip: Use indexOf to dynamically find columns based on headers, or hardcode column indices for faster lookup.
  var emailColumnIndex = headers.indexOf("Email"); // Replace 'Email' with your actual column header
  var nameColumnIndex = headers.indexOf("Name"); // Replace 'Name' with your actual column header

  if (emailColumnIndex === -1 || nameColumnIndex === -1) {
    Logger.log("Required columns not found.");
    return;
  }

  // Create draft emails
  for (var i = 1; i < data.length; i++) {
    var row = data[i];
    var email = row[emailColumnIndex];
    var name = row[nameColumnIndex];

    if (!email) {
      Logger.log(`Skipping row ${i + 1} due to missing email.`);
      continue;
    }

    // Customize email subject and body
    var subject = `Hello ${name || "there"}`; // Tip: Add conditional logic for personalized subject lines
    var body = `Hi ${
      name || "there"
    },\n\nThis is a placeholder email generated by a script.`;

    // Create a draft email
    // Tip: Use GmailApp.sendEmail() to send emails directly instead of creating drafts.
    GmailApp.createDraft(email, subject, body);
  }

  Logger.log("Draft emails created successfully!");
}

/**
 * Suggestions for further customizations:
 *
 * 1. **Access a Specific Sheet**:
 *    Instead of `getActiveSheet()`, use `getSheetByName('SheetName')` to target a specific sheet by name.
 *
 * 2. **Filter Rows**:
 *    Add conditions to skip or include rows based on cell values (e.g., `if (row[statusIndex] !== 'Active') continue;`).
 *
 * 3. **Handle Multiple Recipients**:
 *    Add logic to concatenate multiple email addresses into a single draft (e.g., `emailList.join(', ')`).
 *
 * 4. **Advanced Email Content**:
 *    Create dynamic email content by combining multiple column values or using templates.
 *
 * 5. **Batch Processing**:
 *    Process a subset of rows or use time-based triggers to handle large datasets.
 *
 * 6. **Error Handling**:
 *    Add `try...catch` blocks to handle unexpected errors or log detailed error messages.
 *
 * 7. **Custom Sheet Range**:
 *    Replace `getDataRange()` with `getRange('A1:D50')` to process specific parts of the sheet.
 *
 * 8. **Log Outputs**:
 *    Use `Logger.log()` or `console.log()` for debugging and to track script progress.
 *
 * 9. **Send Emails Instead of Drafts**:
 *    Replace `GmailApp.createDraft()` with `GmailApp.sendEmail()` to send emails directly.
 *
 * 10. **Add Attachments**:
 *    Use GmailAppâ€™s `sendEmail` or `createDraft` methods to include attachments, e.g., `attachments: [fileBlob]`.
 */
