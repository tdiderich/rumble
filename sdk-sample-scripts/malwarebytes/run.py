import requests
from requests.auth import HTTPBasicAuth
import os
import re
from flatten_json import flatten
from ipaddress import ip_address
from typing import Any, Dict, List
import runzero
from runzero.client import AuthError
from runzero.api import CustomAssets, CustomIntegrationsAdmin, Sites, Tasks
from runzero.types import (
    CustomAttribute,
    ImportAsset,
    IPv4Address,
    IPv6Address,
    NetworkInterface,
    ImportTask
)

# runZero creds
RUNZERO_BASE_URL = "https://console.runZero.com/api/v1.0"
RUNZERO_ORG_ID = os.environ["RUNZERO_ORG_ID"]
RUNZERO_SITE_NAME = os.environ["RUNZERO_SITE_NAME"]
RUNZERO_CLIENT_ID = os.environ["RUNZERO_CLIENT_ID"]
RUNZERO_CLIENT_SECRET = os.environ["RUNZERO_CLIENT_SECRET"]

# malwarebytes creds
MALWAREBYTES_URL = os.environ["MALWAREBYTES_URL"]
MALWAREBYTES_ACCOUNT_ID = os.environ["MALWAREBYTES_ACCOUNT_ID"]
MALWAREBYTES_CLIENT_ID = os.environ["MALWAREBYTES_CLIENT_ID"]
MALWAREBYTES_CLIENT_SECRET = os.environ["MALWAREBYTES_CLIENT_SECRET"]

# mac match check
mac_match = re.compile(
    pattern='^([A-Fa-f0-9]{2}: ){5}[A-Fa-f0-9]{2}$| ^([A-Fa-f0-9]{2}: ){7}[A-Fa-f0-9]{2}$| ^([A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2}$| ^([A-Fa-f0-9]{2}-){7}[A-Fa-f0-9]{2}$| ^([A-Fa-f0-9]{4}\.){2}[A-Fa-f0-9]{4}$| ^([A-Fa-f0-9]{4}\.){3}[A-Fa-f0-9]{4}$| ^([A-Fa-f0-9]{4} ){3}[A-Fa-f0-9]{4}$')

# Will need to change on a per integration basis to align wtih JSON object keys


def build_assets_from_json(json_input: List[Dict[str, Any]]) -> List[ImportAsset]:

    assets: List[ImportAsset] = []
    for item in json_input:

        asset_id = item.get("machine", {}).get("id", "")

        names = []
        display_name = item.get("display_name", "")
        fully_qualified_host_name = item.get("fully_qualified_host_name", "")
        if display_name:
            names.append(display_name)
        if fully_qualified_host_name:
            names.append(fully_qualified_host_name)

        os_info = item.get("os_info", {})
        os_version = os_info.get("os_version", "")
        os = os_info.get("os_release_name", "")
        device_type = os_info.get("os_type")

        nics = item.get("agent", {}).get("nics", [])
        ips = []
        macs = []
        for nic in nics:
            ip = nic.get("ips", [])
            ips.extend(ip)
            mac = nic.get("mac_address", "")
            if mac:
                a = mac[0:2]
                b = mac[2:4]
                c = mac[4:6]
                d = mac[6:8]
                e = mac[8:10]
                f = mac[10:]
                formatted_mac = f"{a}:{b}:{c}:{d}:{e}:{f}"
                macs.append(formatted_mac)

        networks = []
        for mac in macs:
            network_interface = build_network_interface(ips=ips, mac=mac)
            networks.append(network_interface)

        # handle any additional values and insert into custom_attrs
        custom_attrs: Dict[str, CustomAttribute] = {}

        root_keys_to_ignore = []
        for key, value in item.items():
            if not isinstance(value, dict):
                root_keys_to_ignore.append(key)

        flattened_items = flatten(nested_dict=item,
                                  root_keys_to_ignore=root_keys_to_ignore)

        item = flattened_items | item

        for key, value in item.items():
            if not isinstance(value, dict):
                custom_attrs[key] = CustomAttribute(str(value)[:1022])

        assets.append(
            ImportAsset(
                id=asset_id,
                networkInterfaces=networks,
                os=os,
                hostnames=names,
                customAttributes=custom_attrs,
                osVersion=os_version,
                deviceType=device_type)
        )

    return assets

# should not need to change on a per integraton basis


def build_network_interface(ips: List[str], mac: str = None) -> NetworkInterface:
    """
    This function converts a mac and a list of strings in either ipv4 or ipv6 format and creates a NetworkInterface that
    is accepted in the ImportAsset
    """
    ip4s: List[IPv4Address] = []
    ip6s: List[IPv6Address] = []
    for ip in ips[:99]:
        try:
            ip_addr = ip_address(ip)
            if ip_addr.version == 4:
                ip4s.append(ip_addr)
            elif ip_addr.version == 6:
                ip6s.append(ip_addr)
            else:
                continue
        except:
            continue

    if mac is None:
        return NetworkInterface(ipv4Addresses=ip4s, ipv6Addresses=ip6s)
    else:
        return NetworkInterface(macAddress=mac, ipv4Addresses=ip4s, ipv6Addresses=ip6s)


def import_data_to_runzero(assets: List[ImportAsset]):
    """
    The code below gives an example of how to create a custom source and upload valid assets from a CSV to a site using
    the new custom source.
    """
    # create the runzero client
    c = runzero.Client()

    # try to log in using OAuth credentials
    try:
        c.oauth_login(RUNZERO_CLIENT_ID, RUNZERO_CLIENT_SECRET)
    except AuthError as e:
        print(f"login failed: {e}")
        return

    # create the site manager to get our site information
    site_mgr = Sites(c)
    site = site_mgr.get(RUNZERO_ORG_ID, RUNZERO_SITE_NAME)
    if not site:
        print(f"unable to find requested site")
        return

    # get or create the custom source manager and create a new custom source
    custom_source_mgr = CustomIntegrationsAdmin(c)
    my_asset_source = custom_source_mgr.get(name="malwarebytes")
    if my_asset_source:
        source_id = my_asset_source.id
    else:
        my_asset_source = custom_source_mgr.create(name="malwarebytes")
        source_id = my_asset_source.id

    # create the import manager to upload custom assets
    import_mgr = CustomAssets(c)
    import_task = import_mgr.upload_assets(
        org_id=RUNZERO_ORG_ID, site_id=site.id, custom_integration_id=source_id, assets=assets, task_info=ImportTask(
            name="malwarebytes Sync")
    )

    if import_task:
        print(
            f"task created! view status here: https://console.runzero.com/tasks?task={import_task.id}")


def get_hosts():

    token = requests.post("https://api.malwarebytes.com/oauth2/token",
                          auth=(MALWAREBYTES_CLIENT_ID, MALWAREBYTES_CLIENT_SECRET), json={"scope": "read", "grant_type": "client_credentials"})
    access_token = token.json().get("access_token", "")

    has_next_page = True
    cursor = None
    endpoints = []
    while has_next_page:
        data = {"is_deleted": False} if not cursor else {"next_cursor": cursor}
        host_response = requests.post(
            MALWAREBYTES_URL + "/nebula/v1/endpoints", headers={"authorization": access_token, "accountid": MALWAREBYTES_ACCOUNT_ID}, json=data)
        cursor = host_response.json().get("next_cursor", None)
        hosts = host_response.json().get("endpoints", None)
        endpoints.extend(hosts)
        if not cursor:
            has_next_page = False

    return endpoints


if __name__ == "__main__":
    malwarebytes_hosts = get_hosts()
    runzero_assets = build_assets_from_json(malwarebytes_hosts)
    import_data_to_runzero(runzero_assets)
